using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Crudy.Common
{
    /// <summary>
    /// To be auto generated by source-generators based on IExistingEntity<TId> implementations in the assembly
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TId"></typeparam>
    public interface INewEntity<T, TId> 
        where T : IEntity<TId>
        where TId : IComparable<TId>, IEquatable<TId>
    {
    }

    public interface IEntity<TId>
        where TId : IComparable<TId>, IEquatable<TId>
    {
        //TId ID { get; }
    }

    public interface ColumnSet
    {

    }

    public readonly struct Increment<T>
    {
        public readonly T Value;

        public Increment(T value) => Value = value;

        public static implicit operator T (Increment<T> value) => value.Value;
        public static implicit operator Increment<T> (T value) => new (value);
    }

    public readonly struct CreateRandom<T>
    {
        public readonly T Value;

        public CreateRandom(T value) => Value = value;

        public static implicit operator T(CreateRandom<T> value) => value.Value;
        public static implicit operator CreateRandom<T>(T value) => new(value);
    }

    public readonly struct UpdateRandom<T>
    {
        public readonly T Value;

        public UpdateRandom(T value) => Value = value;

        public static implicit operator T(UpdateRandom<T> value) => value.Value;
        public static implicit operator UpdateRandom<T>(T value) => new(value);
    }

    public readonly struct CreateTime<T>
    {
        public readonly T Value;

        public CreateTime(T value) => Value = value;

        public static implicit operator T(CreateTime<T> value) => value.Value;
        public static implicit operator CreateTime<T>(T value) => new(value);
    }

    public readonly struct UpdateTime<T>
    {
        public readonly T Value;

        public UpdateTime(T value) => Value = value;

        public static implicit operator T(UpdateTime<T> value) => value.Value;
        public static implicit operator UpdateTime<T>(T value) => new(value);
    }


    public static class NewEntityExtensions
    {
        public static Task<T> WriteTo<T, TId>(this INewEntity<T, TId> entity, IWritableEntityStorage<T, TId> storage)
            where T : IEntity<TId>
            where TId : IComparable<TId>, IEquatable<TId>
            => storage.Write(entity);

        public static Task<SortedList<TId, T>> WriteTo<T, TId>(this INewEntity<T, TId>[] entities, IWritableEntityStorage<T, TId> storage)
            where T : IEntity<TId>
            where TId : IComparable<TId>, IEquatable<TId>
            => storage.WriteMany(entities);
    }
}
