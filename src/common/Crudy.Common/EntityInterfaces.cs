using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Crudy.Common
{
    /// <summary>
    /// To be auto generated by source-generators based on IExistingEntity<TId> implementations in the assembly
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TId"></typeparam>
    public interface INewEntity<T, TId> 
        where T : IExistingEntity<TId>
        where TId : IComparable<TId>, IEquatable<TId>
    {
    }

    public interface IExistingEntity<TId>
        where TId : IComparable<TId>, IEquatable<TId>
    {
        TId ID { get; }
    }

    public record ExampleItem(
        int ID, 
        string Value) 
        : IExistingEntity<int>;

    public static class NewEntityExtensions
    {
        public static Task<T> WriteTo<T, TId>(this INewEntity<T, TId> entity, IWritableEntityStorage<T, TId> storage)
            where T : IExistingEntity<TId>
            where TId : IComparable<TId>, IEquatable<TId>
            => storage.Write(entity);

        public static Task<SortedList<TId, T>> WriteTo<T, TId>(this INewEntity<T, TId>[] entities, IWritableEntityStorage<T, TId> storage)
            where T : IExistingEntity<TId>
            where TId : IComparable<TId>, IEquatable<TId>
            => storage.WriteMany(entities);
    }
}
